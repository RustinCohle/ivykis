/*
 * ivykis, an event handling library
 * Copyright (C) 2002, 2003, 2009 Lennert Buytenhek
 * Dedicated to Marija Kulikova.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version
 * 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 2.1 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License version 2.1 along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

#ifndef __IV_H
#define __IV_H

#include <errno.h>
#if defined(HAVE_SYS_DEVPOLL_H) || defined(NEED_SELECT)
#include <iv_avl.h>
#endif
#include <iv_list.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <TIMESPEC_HEADER>
#include <unistd.h>

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Library initialisation, main loop.
 */
void iv_init(void);
int iv_inited(void);
const char *iv_poll_method_name(void);
void iv_main(void);
void iv_quit(void);
void iv_deinit(void);
void iv_fatal(const char *fmt, ...) __attribute__((noreturn))
	__attribute__((format(printf, 1, 2)));
void iv_set_fatal_msg_handler(void (*handler)(const char *msg));


/*
 * Time handling.
 */
struct timespec *__iv_now_location();
void iv_validate_now(void);
void iv_invalidate_now(void);

#define iv_now		(*__iv_now_location())


/*
 * File descriptor handling.
 */
struct iv_fd {
	/*
	 * User data.
	 */
	int			fd;
	void			*cookie;
	void			(*handler_in)(void *);
	void			(*handler_out)(void *);
	void			(*handler_err)(void *);

	/*
	 * If this fd gathered any events during this polling round,
	 * fd->list_active will be on iv_main()'s active list, and
	 * fd->ready_bands will indicate which bands are currently
	 * active.
	 */
	struct iv_list_head	list_active;
	unsigned		ready_bands:3;

	/*
	 * Reflects whether the fd has been registered with
	 * iv_fd_register().  Will be zero in ->notify_fd() if the
	 * fd is being unregistered.
	 */
	unsigned		registered:1;

	/*
	 * ->wanted_bands is set by the ivykis core to indicate
	 * which bands currenty have handlers registered for them.
	 */
	unsigned		wanted_bands:3;

	/*
	 * ->registered_bands is maintained by the poll method to
	 * indicate which bands are currently registered with the
	 * kernel, so that the ivykis core knows when to call
	 * the poll method's ->notify_fd() on an fd.
	 */
	unsigned		registered_bands:3;

#if defined(HAVE_SYS_DEVPOLL_H) || defined(HAVE_EPOLL_CREATE) || defined(HAVE_KQUEUE) || defined(HAVE_PORT_CREATE)
	/*
	 * ->list_notify is used by poll methods that defer updating
	 * kernel registrations to ->poll() time.
         */
	struct iv_list_head	list_notify;
#endif

	/*
	 * This is for state internal to some of the poll methods.
	 */
	union {
#if defined(HAVE_SYS_DEVPOLL_H) || defined(NEED_SELECT)
		/*
		 * ->avl_node is used by poll methods that
		 * maintain an internal fd tree.
		 */
		struct iv_avl_node	avl_node;
#endif
#ifdef HAVE_POLL
		/*
		 * ->index is used by iv_method_poll to maintain the
		 * index of this fd in the list of pollfds.
		 */
		int			index;
#endif
	};
};

static inline void IV_FD_INIT(struct iv_fd *fd)
{
	fd->fd = -1;
	fd->handler_in = NULL;
	fd->handler_out = NULL;
	fd->handler_err = NULL;
	fd->registered = 0;
}

void iv_fd_register(struct iv_fd *);
int iv_fd_register_try(struct iv_fd *);
void iv_fd_unregister(struct iv_fd *);
int iv_fd_registered(struct iv_fd *);
void iv_fd_set_handler_in(struct iv_fd *, void (*)(void *));
void iv_fd_set_handler_out(struct iv_fd *, void (*)(void *));
void iv_fd_set_handler_err(struct iv_fd *, void (*)(void *));


/*
 * Task handling.
 */
struct iv_task {
	/*
	 * User data.
	 */
	void			*cookie;
	void			(*handler)(void *);

	/*
	 * Private data.
	 */
	struct iv_list_head	list;
};

static inline void IV_TASK_INIT(struct iv_task *t)
{
	INIT_IV_LIST_HEAD(&t->list);
}

void iv_task_register(struct iv_task *);
void iv_task_unregister(struct iv_task *);
int iv_task_registered(struct iv_task *);


/*
 * Timer handling.
 */
struct iv_timer {
	/*
	 * User data.
	 */
	struct timespec		expires;
	void			*cookie;
	void			(*handler)(void *);

	/*
	 * Private data.
	 */
	int			index;
};

static inline void IV_TIMER_INIT(struct iv_timer *t)
{
	t->index = -1;
}

void iv_timer_register(struct iv_timer *);
void iv_timer_unregister(struct iv_timer *);
int iv_timer_registered(struct iv_timer *);

#ifdef __cplusplus
}
#endif


#endif
